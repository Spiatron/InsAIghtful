generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

enum Role {
  basic
  premium
  admin
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(basic)
  credits       Int       @default(5)

  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  CreditHistory CreditHistory[]
}

model Course {
  id     String @id @default(cuid())
  userId String

  name          String
  image         String
  units         Unit[]
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Progress      UserProgress[]
  CreditHistory CreditHistory[]

  @@index([userId], name: "userId")
}

model Unit {
  id       String @id @default(cuid())
  courseId String

  name     String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id     String @id @default(cuid())
  unitId String

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?          @db.VarChar(3000)
  unit               Unit             @relation(fields: [unitId], references: [id], onDelete: Cascade)
  questions          Question[]
  history            ChapterHistory[]

  @@index([unitId], name: "unitId")
}

model Question {
  id        String @id @default(cuid())
  chapterId String

  question       String  @db.VarChar(3000)
  answer         Int
  options        String  @db.VarChar(3000)
  selectedAnswer Int?
  chapter        Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId], name: "chapterId")
}

model UserProgress {
  id        String   @id @default(cuid())
  courseId  String
  chapterId String
  videoDone Boolean?
  quizDone  Boolean?
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId], name: "courseId")
}

model ChapterHistory {
  id             String  @id @default(cuid())
  chapterId      String
  correctAnswers String  @db.VarChar(3000)
  chapter        Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId], name: "chapterId")
}

model CreditHistory {
  id       String  @id @default(cuid())
  userId   String
  courseId String?

  actionPerformed String
  creditUpdate    Int
  date            DateTime @default(now())

  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Course Course? @relation(fields: [courseId], references: [id])

  @@index([userId], name: "userId")
  @@index([courseId], name: "courseId")
}
